<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright(c) 2017 DRAWNZER GAMES -> ANURAG

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

              coolanuragdzxj@gmail.com
-->

<root xmlns:android="http://schemas.android.com/apk/res/android">
	<init>
		<log text="Speak My Words Unreal Engine 4 Plugin...."/>
	</init>

	
  <androidManifestUpdates>
    
	</androidManifestUpdates>

	<gameActivityImportAdditions>
		<insert>
      import android.speech.tts.TextToSpeech;
      import java.util.Locale;
    </insert>
	</gameActivityImportAdditions>

	<gameActivityClassAdditions>
	  <insert>
        /** The instance of Text To Speech, which is responsible for speaking. */    
        private TextToSpeech tts;
        
        /** Is true if the text to speech instance is successfully initialized. */
        private boolean ttsInited;


        /** The method to initialise the text to speech instance. */
        public void AndroidThunkJava_InitTTS(){
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    tts = new TextToSpeech(_activity, new TextToSpeech.OnInitListener() {
                        @Override
                        public void onInit(int status) {
                            ttsInited = true;
                            android.util.Log.d("SPEAK_MY_WORDS", "Init Result = " + ttsInited);
                        }
                    });
                }
            });
        }
      
        /** The method to speak the the sentence. */
        public void AndroidThunkJava_SpeakThisSentence(String sentence){
            final String str = sentence;        
            runOnUiThread(new Runnable() {
                @Override
                public void run() {              
                if(!ttsInited){
                        android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING SENTENCE RETURNED");
                        return;
                }
                tts.speak(str ,TextToSpeech.QUEUE_FLUSH, null);
                android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING SENTENCE SPEAKING");
                }
            });
        }

        /** The method to set the pitch of the text to speech instance. */
        public void AndroidThunkJava_SetPitch(float pitch){
            if(!ttsInited){
                android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING SET PITCH RETURNED");
                return;
            }
            tts.setPitch(pitch);
            android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING SET PITCH SET");
        }

        /** The method to set then speech rate. */
        public void AndroidThunkJava_SetSpeechRate(float rate){
            tts.setSpeechRate(rate);
            android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING SET RATE SET");
        }

        /** The method to know whether it's currently speaking or not. */
        public boolean AndroidThunkJava_IsSpeaking(){
            if(!ttsInited){
                android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING ISSPEAKING RETURNED");
                return false;
            }
            android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING CURRENTLY SPEAKING");
            return tts.isSpeaking();
        }

        /** The method to set the speaking language to the device's default language. */
        public void AndroidThunkJava_SetDefaultLauguage(){
            if(!ttsInited){
                android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING SET LANGUAGE RETURNED");
                return;
            }
            android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING LANGUAGE SET");
            tts.setLanguage(Locale.getDefault());
        }
        
        /** The method to know whether the text to speech instance is initialized or not. */
        public boolean AndroidThunkJava_IsSpeakingInitialized(){
            android.util.Log.d("SPEAK_MY_WORDS", "SPEAKING INIT RESULT = " + ttsInited);
            return ttsInited;
        }
      
      
    </insert>
	</gameActivityClassAdditions>

	<gameActivityOnPauseAdditions>
		<insert>
			
		</insert>
	</gameActivityOnPauseAdditions>
	
	<gameActivityOnStartAdditions>
		<insert>
	
    </insert>>
	</gameActivityOnStartAdditions>>

	<gameActivityOnResumeAdditions>
		<insert>
		
    </insert>
	</gameActivityOnResumeAdditions>

	<gameActivityOnDestroyAdditions>
		<insert>
		
    </insert>
	</gameActivityOnDestroyAdditions>
</root>
